#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text"))
}
}
load_all()
str()
explain()
#call OpenAI API
call_openai_api = function(client, body) {
url = paste0(client$azure_endpoint, "openai/deployments/", client$deployment_name, "/chat/completions?api-version=", client$api_version)
#Print URL for debugging
cat("URL:", url, "\n")
#POST request to API
response = httr::POST(
url,
httr::add_headers(
Authorization = paste("Bearer", client$api_key),
`Content-Type` = "application/json"
),
body = jsonlite::toJSON(body, auto_unbox = TRUE),
encode = "json"
)
#Print response for debugging
cat("Response status:", status_code(response), "\n")
cat("Response content:", content(response, "text"), "\n")
#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text"))
}
}
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#seed for reproducibility
seed = 100
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com/",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-02-01"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n", environment_info,
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client, body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
#call OpenAI API
call_openai_api = function(client, body) {
url = paste0(client$azure_endpoint, "/openai/deployments/", client$deployment_name, "/chat/completions?api-version=", client$api_version)
#Print URL for debugging
cat("URL:", url, "\n")
#POST request to API
response = httr::POST(
url,
httr::add_headers(
Authorization = paste(": Bearer", client$api_key),
`Content-Type` = "application/json"
),
body = jsonlite::toJSON(body, auto_unbox = TRUE),
encode = "json"
)
#Print response for debugging
cat("Response status:", status_code(response), "\n")
cat("Response content:", content(response, "text"), "\n")
#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text"))
}
}
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#seed for reproducibility
seed = 100
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-02-01"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n", environment_info,
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client, body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#seed for reproducibility
seed = 100
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n", environment_info,
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client, body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
#call OpenAI API
call_openai_api = function(client, body) {
url = paste0(client$azure_endpoint, "/openai/deployments/", client$deployment_name, "/chat/completions?api-version=", client$api_version)
#Print URL for debugging
cat("URL:", url, "\n")
#POST request to API
response = httr::POST(
url,
httr::add_headers(
Authorization = paste("Bearer", client$api_key),
`Content-Type` = "application/json"
),
body = jsonlite::toJSON(body, auto_unbox = TRUE),
encode = "json"
)
#Print response for debugging
cat("Response status:", status_code(response), "\n")
cat("Response content:", content(response, "text"), "\n")
#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text"))
}
}
load_all()
str()
explain()
#call OpenAI API
call_openai_api = function(client, body) {
url = paste0(client$azure_endpoint, "/openai/deployments/", client$deployment_name, "/chat/completions?api-version=", client$api_version)
#Print URL for debugging
cat("URL:", url, "\n")
#POST request to API
response = httr::POST(
url,
httr::add_headers(
`api-key` = client$api_key,
`Content-Type` = "application/json"
),
body = jsonlite::toJSON(body, auto_unbox = TRUE),
encode = "json"
)
#Print response for debugging
cat("Response status:", status_code(response), "\n")
cat("Response content:", content(response, "text"), "\n")
#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text"))
}
}
load_all()
str()
explain()
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
environment_info
?session_info
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#seed for reproducibility
seed = 100
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("loaded", "attached")[1]),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n", environment_info,
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client, body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("loaded", "attached")[1]),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
environment_info
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("attached")),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
environment_info
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#seed for reproducibility
seed = 100
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("attached")),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n", environment_info,
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client, body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
load_all()
str()
explain()
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("attached")),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n",
jsonlite::toJSON(environment_info, auto_unbox = TRUE),
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client = client, body = body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("attached")),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n",
jsonlite::toJSON(environment_info, auto_unbox = TRUE),
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client = client, body = body)
content_vector = response_json$choices$message.content
print(content_vector, encoding = "UTF-8")
}
load_all()
str()
explain()
#call OpenAI API
call_openai_api = function(client, body) {
url = paste0(client$azure_endpoint, "/openai/deployments/", client$deployment_name, "/chat/completions?api-version=", client$api_version)
#Print URL for debugging
#cat("URL:", url, "\n")
#POST request to API
response = httr::POST(
url,
httr::add_headers(
`api-key` = client$api_key,
`Content-Type` = "application/json"
),
body = jsonlite::toJSON(body, auto_unbox = TRUE),
encode = "json"
)
#Print response for debugging
#cat("Response status:", status_code(response), "\n")
#cat("Response content:", content(response, "text"), "\n")
#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text"))
}
}
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("attached")),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n",
jsonlite::toJSON(environment_info, auto_unbox = TRUE),
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client = client, body = body)
content_vector = response_json$choices$message.content
print(content_vector)
}
load_all()
str()
explain()
#Function: rainer::explain in order to explain the last error message occurred
explain = function() {
#How does the student's working session look like?
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(pkgs = c("attached")),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
#Azure OpenAI Client
client = list(
azure_endpoint = "https://soda-oai-easyaccess-prod-swedencentral.openai.azure.com",
api_key = "39257ccf9f724bdc81add8c7ca1e155b",
deployment_name = "gpt-35-turbo",
api_version = "2024-08-01-preview"
)
body = list(
#What should the message contain?
messages = list(
list(role = "system", content = "You are helping students in an university level R programming course for beginners."),
list(role = "user", content = paste("You got the following information on the current state of their work in R: \n",
jsonlite::toJSON(environment_info, auto_unbox = TRUE),
"\n Identify the error and give a concise feedback of how to correct the issue."))),
max_tokens = 100
)
response_json = call_openai_api(client = client, body = body)
content_vector = response_json$choices$message.content
print(content_vector)
encoding = "UTF-8"
}
load_all()
str()
explain()
#call OpenAI API
call_openai_api = function(client, body) {
url = paste0(client$azure_endpoint, "/openai/deployments/", client$deployment_name, "/chat/completions?api-version=", client$api_version)
#Print URL for debugging
#cat("URL:", url, "\n")
#POST request to API
response = httr::POST(
url,
httr::add_headers(
`api-key` = client$api_key,
`Content-Type` = "application/json"
),
body = jsonlite::toJSON(body, auto_unbox = TRUE),
encode = "json"
)
#Print response for debugging
#cat("Response status:", status_code(response), "\n")
#cat("Response content:", content(response, "text"), "\n")
#Check if request was successful
if (status_code(response) == 200) {
return(jsonlite::fromJSON(content(response, "text", encoding = "UTF-8"), flatten = TRUE))
} else {
stop("API request failed with status: ", status_code(response), "\n", content(response, "text", encoding = "UTF-8"))
}
}
load_all()
str()
explain()
getwd()
load_all()
devtools::check()
summary(var1)
load_all()
summary(var1)
explain()
load_all()
summary(var1)
explain()
var2
var2 = 9
summary(var1)
explain()
load_all()
summary(var1)
explain()
