use_r("explain")
usethis::use_r("explain")
x = "alpha,bravo,charlie,delta"
load_all()
library(devtools)
load_all()
strsplit1(x)
strsplit1(x, split = ",")
?conflicts()
?globalenv
globalenv()
environment()
.GlobalEnv
parent.env()
parent.env(env)
parent.env(.GlobalEnv)
usethis::use_r("save")
ls(envir = .GlobalEnv)
installed.packages()
sessionInfo()
?session_info()
session_info(to_file = TRUE)
?getOption()
error_messages = getOption("last.warning")
strsplit()
error_messages = getOption("last.warning")
error_messages = getOption(showWarnCalls)
error_messages = getOption("showWarnCalls")
error_messages = getOption("error")
strsplit()
error_messages = getOption("error")
error_messages = getOption(options(error = utils::recover))
error_messages = getOption("expressions")
error_messages = getOption("showWarnCalls")
error_messages = getOption("showErrorCalls")
error_messages = getOption("show.error.messages")
?tryCatch
simpleError()
simpleError()
capture_last_error <- function(expr) {
last_error <- NULL  # Variable zur Speicherung der letzten Fehlermeldung
tryCatch(
expr,
error = function(e) {
last_error <<- e$message  # Speichern der Fehlermeldung in last_error
}
)
return(last_error)  # RÃ¼ckgabe der gespeicherten Fehlermeldung (NULL, falls kein Fehler)
}
strsplit()
strsplit()
strsplit()
strsplit()
error = tryCatch(expr, error = function(e) {
last_error = e$message
})
strsplit()
error = tryCatch(expr, error = function(e) {
last_error = e$message
})
return(last_error)
error = function(expr) {
last_error = NULL
tryCatch(expr, error = function(e) {
last_error = e$message
})
return(last_error)
}
error = (strsplit())
last_error_message = error(strplit())
last_error_message = error(log("a"))
error = function(expr) {
tryCatch(expr, error = function(e) {
last_error = e$message
})
return(last_error)
}
last_error_message = error(log("a"))
simpleError()
tryCatch(log("a"))
error = getOption("last.warning")
?getOption
env_objects = ls(envir = .GlobalEnv)
packages = devtools::session_info()
View(packages)
getOption(show.error.messages)
getOption("show.error.messages")
getOption("warn")
getOption("warn = 2")
getOption("warn(2)")
warnings()
getOption("warn(2)")
warnings()
options(warn = 2)
warnings()
options(error = recover)
strsplit()
strsplit()
?getOption
error = getOption("warn")
strsplit()
error = getOption("warn")
error = getOption("warn" = 2)
error = options(warn = 2)
View(error)
strsplit()
error = options(warn = 2)
View(error)
warnings()
geterrmessage()
error = (geterrmessage())
env_objects = ls(envir = .GlobalEnv)
packages = devtools::session_info()
current_script <- try(rstudioapi::getActiveDocumentContext()$path, silent = TRUE)
?try
current_script <- try(rstudioapi::getActiveDocumentContext())
View(current_script)
current_script <- try(rstudioapi::getActiveDocumentContext()$contents)
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = (geterrmessage())
)
View(environment_info)
write_json
?write_json
??write_json
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = (geterrmessage())
)
jsonlite::write_json(environment_info, path = "testenv", pretty = TRUE)
rsave = function(filename) {
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = (geterrmessage())
)
jsonlite::write_json(environment_info, path = filename, pretty = TRUE)
}
load_all()
library(devtools)
load_all()
rsave("test2")
check()
library(devtools)
check()
library(usethis)
check()
devtools::check()
use_mit_license()
usethis::use_mit_license()
devtools::document()
usethis::use_import_from("devtools", "rstudioapi", "jsonlite")
devtools::document()
devtools::check()
save = function(filename) {
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
jsonlite::write_json(environment_info, path = filename, pretty = TRUE)
}
rsave = function(filename) {
environment_info = list(
Environment_Objects = ls(envir = .GlobalEnv),
packages = devtools::session_info(),
current_script = try(rstudioapi::getActiveDocumentContext()$contents),
errors = geterrmessage()
)
jsonlite::write_json(environment_info, path = filename, pretty = TRUE)
}
devtools::check()
devtools::check()
